package semanticMarkup.ling.learn;

import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class UnsupervisedClauseMarkup implements ITerminologyLearner {
	
	//directory of /descriptions folder
	private String desDir = "";
	//directory of /characters folder
	private String chrDir = "";
	//database name
	private String dataBase = "";
	//learning mode
	private String learningMode="";
	//prefix for all tables generated by this program
	private String prefix = "";
	//default general tag
	private String defaultGeneralTag = "general";
	//knowledge base
	private String knlgBase = "phenoscape";
	//tag length
	private int tagLength = 150;
	
	//Database parameters
	private String host = "localhost";
	private String user = "biocreative";
	private String password = "biocreative";
	
	//DNGYE_TODO
	//my $dbh = DBI->connect("DBI:mysql:host=$host", $user, $password)
	//		or die DBI->errstr."\n";
	
	private String CHECKEDWORDS = ":"; //leading three words of sentences
	private int N = 3; //$N leading words
	private int SENTID = 0;
	private int DECISIONID = 0;
	private String PROPERNOUNS = "propernouns"; //EOL
	
	private Hashtable WNNUMBER =new Hashtable(); //word->(p|s)
	private Hashtable WNSINGULAR = new Hashtable();//word->singular
	private Hashtable WNPOS = new Hashtable();   //word->POSs
	private Hashtable WNPOSRECORDS = new Hashtable();
	private String NEWDESCRIPTION =""; //record the index of sentences that ends a description
	private Hashtable WORDS = new Hashtable();
	private Hashtable PLURALS = new Hashtable();
	
	private String StringNUMBERS = "zero|one|ones|first|two|second|three|third|thirds|four|fourth|fourths|quarter|five|fifth|fifths|six|sixth|sixths|seven|seventh|sevenths|eight|eighths|eighth|nine|ninths|ninth|tenths|tenth";
	//the following two patterns are used in mySQL rlike
	private String StringPREFIX ="ab|ad|bi|deca|de|dis|di|dodeca|endo|end|e|hemi|hetero|hexa|homo|infra|inter|ir|macro|mega|meso|micro|mid|mono|multi|ob|octo|over|penta|poly|postero|post|ptero|pseudo|quadri|quinque|semi|sub|sur|syn|tetra|tri|uni|un|xero|[a-z0-9]+_";
	private String StringSUFFIX ="er|est|fid|form|ish|less|like|ly|merous|most|shaped"; // 3_nerved, )_nerved, dealt with in subroutine
	private String StringFORBIDDEN ="to|and|or|nor"; //words in this list can not be treated as boundaries "to|a|b" etc.
	private String StringPRONOUN ="all|each|every|some|few|individual|both|other";
	private String StringCHARACTER ="lengths|length|lengthed|width|widths|widthed|heights|height|character|characters|distribution|distributions|outline|outlines|profile|profiles|feature|features|form|forms|mechanism|mechanisms|nature|natures|shape|shapes|shaped|size|sizes|sized";//remove growth, for growth line. check 207, 3971
	private String StringPREPOSITION ="above|across|after|along|around|as|at|before|below|beneath|between|beyond|by|during|for|from|in|into|near|of|off|on|onto|out|outside|over|than|throught|throughout|toward|towards|up|upward|with|without";
	private String StringTAGS = "";
	private String StringPLENDINGS = "[^aeiou]ies|i|ia|(x|ch|sh)es|ves|ices|ae|s";
	private String StringCLUSTERSTRINGS = "group|groups|clusters|cluster|arrays|array|series|fascicles|fascicle|pairs|pair|rows|number|numbers|\\d+";
	private String StringSUBSTRUCTURESTRINGS = "part|parts|area|areas|portion|portions";
	private String mptn = "((?:[mbq][,&]*)*(?:m|b|q(?=[pon])))";//grouped #may contain q but not the last m, unless it is followed by a p
	private String nptn = "((?:[nop][,&]*)*[nop])"; //grouped #must present, no q allowed
	
	//perl->java : $bptn = "([,;:\\.]*\$|,*[bm]|(?<=[pon]),*q)"; -> String bptn = "([,;:\\\\.]*\\$|,*[bm]|(?<=[pon]),*q)";
	private String bptn = "([,;:\\\\.]*\\$|,*[bm]|(?<=[pon]),*q)"; //grouped #when following a p, a b could be a q
	
	private String SEGANDORPTN = "(?:"+mptn+nptn+")"; //((?:[mq],?)*&?(?:m|q(?=p))?)((?:[np],?)*&?[np])
	private String ANDORPTN = "^(?:"+SEGANDORPTN+"[,&]+)*"+SEGANDORPTN+bptn;
	
	private String IGNOREPTN ="(IGNOREPTN)"; //disabled
	private String stop = "state|page|fig|"+"a|about|above|across|after|along|also|although|amp|an|and|are|as|at|be|because|become|becomes|becoming|been|before|behind|being|beneath|between|beyond|but|by|ca|can|could|did|do|does|doing|done|during|for|from|had|has|have|hence|here|how|if|in|into|inside|inward|is|it|its|least|may|might|more|most|near|no|not|of|off|on|onto|or|out|outside|outward|over|should|so|than|that|the|then|there|these|this|those|throughout|to|toward|towards|under|up|upward|via|was|were|what|when|where|whereas|which|why|with|within|without|would";

	//DNGYE_TODO

	public UnsupervisedClauseMarkup(String dir, String db, String lm, String p) {
		System.out.println("Initialized:\n");
		this.desDir = dir.concat("/");
		this.chrDir = desDir.replaceAll("descriptions.*", "characters/");
		this.dataBase = db;
		this.learningMode = lm;
		this.prefix = p;
		System.out.println(String.format("Read directory: %s", this.desDir));
		System.out.println(String.format("Character directory: %s", this.chrDir));
		System.out.println(String.format("%s", this.dataBase));
		System.out.println(String.format("%s", this.learningMode));
		System.out.println(String.format("%s", this.prefix));
	}
	
	public void populatesents() {
		System.out.println("Reading sentences:\n");
	}

	
	public void learn(List<Treatment> treatments) {
		System.out.println("Method: learn\n");
	}

	public Map<Treatment, List<String>> getSentences() {
		System.out.println("Method: getSentences\n");
		return null;
	}

	public Map<Treatment, List<String>> getSentencesForOrganStateMarker() {
		System.out.println("Method: getSentencesForOrganStateMarker\n");
		return null;
	}

	public List<String> getAdjNouns() {
		System.out.println("Method: getAdjNouns\n");
		return null;
	}
	
	public Map<String, String> getAdjNounSent(){
		System.out.println("Method: getAdjNounsSent\n");
		return null;
	}

	public Set<String> getBracketTags() {
		System.out.println("Method: getAdjNounsSent\n");
		return null;
	}

	public Set<String> getWordRoleTags() {
		System.out.println("Method: getSentenceTags\n");
		return null;
	}

	public Map<String, Set<String>> getWordToSources() {
		System.out.println("Method: getBracketTags\n");
		return null;
	}

	public Map<String, Set<String>> getRoleToWords() {
		System.out.println("Method: getRoleToWords\n");
		return null;
		
	}

	public Map<String, Set<String>> getWordsToRoles() {
		System.out.println("Method: getWordsToRoles\n");
		return null;
	}

	public Map<String, String> getHeuristicNouns() {
		System.out.println("Method: getHeuristicNouns\n");
		return null;
	}

	public Map<Treatment, List<String>> getSentenceTags(){
		System.out.println("Method: getTermCategories\n");
		return null;
	}

	public Map<String, Set<String>> getTermCategories(){
		System.out.println("Method: getTermCategories\n");
		return null;
	}

}
